<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="69351"><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::finish (1,245 samples, 1.80%)</title><rect x="12.6545%" y="181" width="1.7952%" height="15" fill="rgb(227,0,7)" fg:x="8776" fg:w="1245"/><text x="12.9045%" y="191.50">r..</text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (1,245 samples, 1.80%)</title><rect x="12.6545%" y="165" width="1.7952%" height="15" fill="rgb(217,0,24)" fg:x="8776" fg:w="1245"/><text x="12.9045%" y="175.50">r..</text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (237 samples, 0.34%)</title><rect x="14.1079%" y="149" width="0.3417%" height="15" fill="rgb(221,193,54)" fg:x="9784" fg:w="237"/><text x="14.3579%" y="159.50"></text></g><g><title>rs-1brc.exe`ahash::random_state::get_fixed_seeds (18 samples, 0.03%)</title><rect x="14.9673%" y="149" width="0.0260%" height="15" fill="rgb(248,212,6)" fg:x="10380" fg:w="18"/><text x="15.2173%" y="159.50"></text></g><g><title>rs-1brc.exe`once_cell::race::once_box::OnceBox&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::get_or_init (18 samples, 0.03%)</title><rect x="14.9673%" y="133" width="0.0260%" height="15" fill="rgb(208,68,35)" fg:x="10380" fg:w="18"/><text x="15.2173%" y="143.50"></text></g><g><title>rs-1brc.exe`core::sync::atomic::AtomicPtr&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::load (286 samples, 0.41%)</title><rect x="15.1144%" y="133" width="0.4124%" height="15" fill="rgb(232,128,0)" fg:x="10482" fg:w="286"/><text x="15.3644%" y="143.50"></text></g><g><title>rs-1brc.exe`core::sync::atomic::atomic_load (286 samples, 0.41%)</title><rect x="15.1144%" y="117" width="0.4124%" height="15" fill="rgb(207,160,47)" fg:x="10482" fg:w="286"/><text x="15.3644%" y="127.50"></text></g><g><title>rs-1brc.exe`ahash::impl$2::default (748 samples, 1.08%)</title><rect x="14.4497%" y="181" width="1.0786%" height="15" fill="rgb(228,23,34)" fg:x="10021" fg:w="748"/><text x="14.6997%" y="191.50"></text></g><g><title>rs-1brc.exe`ahash::random_state::RandomState::with_fixed_keys (748 samples, 1.08%)</title><rect x="14.4497%" y="165" width="1.0786%" height="15" fill="rgb(218,30,26)" fg:x="10021" fg:w="748"/><text x="14.6997%" y="175.50"></text></g><g><title>rs-1brc.exe`once_cell::race::once_box::OnceBox&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::get_or_try_init&lt;array$&lt;array$&lt;u64,4&gt;,2&gt;,once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$&lt;u64,4&gt;,2&gt;,ahash::random_state::get_fixed_seeds::closure_env$0&gt;,enum2$&lt;once_cell::race::once_box::impl$3::get_or_init::Void&gt; &gt;(once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$ (371 samples, 0.53%)</title><rect x="14.9933%" y="149" width="0.5350%" height="15" fill="rgb(220,122,19)" fg:x="10398" fg:w="371"/><text x="15.2433%" y="159.50"></text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (143 samples, 0.21%)</title><rect x="15.8686%" y="101" width="0.2062%" height="15" fill="rgb(250,228,42)" fg:x="11005" fg:w="143"/><text x="16.1186%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (111 samples, 0.16%)</title><rect x="15.9147%" y="85" width="0.1601%" height="15" fill="rgb(240,193,28)" fg:x="11037" fg:w="111"/><text x="16.1647%" y="95.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::AHasher::large_update (946 samples, 1.36%)</title><rect x="15.6898%" y="117" width="1.3641%" height="15" fill="rgb(216,20,37)" fg:x="10881" fg:w="946"/><text x="15.9398%" y="127.50"></text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_add (679 samples, 0.98%)</title><rect x="16.0748%" y="101" width="0.9791%" height="15" fill="rgb(206,188,39)" fg:x="11148" fg:w="679"/><text x="16.3248%" y="111.50"></text></g><g><title>rs-1brc.exe`ahash::operations::read_small(ref$&lt;slice2$ (255 samples, 0.37%)</title><rect x="17.0538%" y="117" width="0.3677%" height="15" fill="rgb(217,207,13)" fg:x="11827" fg:w="255"/><text x="17.3038%" y="127.50"></text></g><g><title>rs-1brc.exe`ahash::convert::impl$0::read_last_u32(ref$&lt;slice2$ (208 samples, 0.30%)</title><rect x="17.1216%" y="101" width="0.2999%" height="15" fill="rgb(231,73,38)" fg:x="11874" fg:w="208"/><text x="17.3716%" y="111.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (1,349 samples, 1.95%)</title><rect x="15.5283%" y="133" width="1.9452%" height="15" fill="rgb(225,20,46)" fg:x="10769" fg:w="1349"/><text x="15.7783%" y="143.50">r..</text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_add (36 samples, 0.05%)</title><rect x="17.4215%" y="117" width="0.0519%" height="15" fill="rgb(210,31,41)" fg:x="12082" fg:w="36"/><text x="17.6715%" y="127.50"></text></g><g><title>rs-1brc.exe`alloc::borrow::impl$12::hash(enum2$&lt;alloc::borrow::Cow (2,451 samples, 3.53%)</title><rect x="15.5283%" y="181" width="3.5342%" height="15" fill="rgb(221,200,47)" fg:x="10769" fg:w="2451"/><text x="15.7783%" y="191.50">rs-..</text></g><g><title>rs-1brc.exe`core::hash::impls::impl$2::hash(ref$ (2,451 samples, 3.53%)</title><rect x="15.5283%" y="165" width="3.5342%" height="15" fill="rgb(226,26,5)" fg:x="10769" fg:w="2451"/><text x="15.7783%" y="175.50">rs-..</text></g><g><title>rs-1brc.exe`core::hash::Hasher::write_str(ahash::fallback_hash::AHasher*, ref$ (2,451 samples, 3.53%)</title><rect x="15.5283%" y="149" width="3.5342%" height="15" fill="rgb(249,33,26)" fg:x="10769" fg:w="2451"/><text x="15.7783%" y="159.50">rs-..</text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::write_u8 (1,102 samples, 1.59%)</title><rect x="17.4734%" y="133" width="1.5890%" height="15" fill="rgb(235,183,28)" fg:x="12118" fg:w="1102"/><text x="17.7234%" y="143.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::AHasher::update (1,102 samples, 1.59%)</title><rect x="17.4734%" y="117" width="1.5890%" height="15" fill="rgb(221,5,38)" fg:x="12118" fg:w="1102"/><text x="17.7234%" y="127.50"></text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (854 samples, 1.23%)</title><rect x="17.8310%" y="101" width="1.2314%" height="15" fill="rgb(247,18,42)" fg:x="12366" fg:w="854"/><text x="18.0810%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (331 samples, 0.48%)</title><rect x="18.5852%" y="85" width="0.4773%" height="15" fill="rgb(241,131,45)" fg:x="12889" fg:w="331"/><text x="18.8352%" y="95.50"></text></g><g><title>rs-1brc.exe`alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;rs_1brc::approach_7::Data&gt; &gt;,alloc::alloc::Global&gt;::push(enum2$&lt;core::option::Option (31 samples, 0.04%)</title><rect x="19.0625%" y="181" width="0.0447%" height="15" fill="rgb(249,31,29)" fg:x="13220" fg:w="31"/><text x="19.3125%" y="191.50"></text></g><g><title>rs-1brc.exe`core::ptr::write(enum2$&lt;core::option::Option&lt;rs_1brc::approach_7::Data&gt; &gt;*, enum2$&lt;core::option::Option (17 samples, 0.02%)</title><rect x="19.0826%" y="165" width="0.0245%" height="15" fill="rgb(225,111,53)" fg:x="13234" fg:w="17"/><text x="19.3326%" y="175.50"></text></g><g><title>rs-1brc.exe`alloc::vec::impl$13::index_mut(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (388 samples, 0.56%)</title><rect x="19.1086%" y="181" width="0.5595%" height="15" fill="rgb(238,160,17)" fg:x="13252" fg:w="388"/><text x="19.3586%" y="191.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option (388 samples, 0.56%)</title><rect x="19.1086%" y="165" width="0.5595%" height="15" fill="rgb(214,148,48)" fg:x="13252" fg:w="388"/><text x="19.3586%" y="175.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option (388 samples, 0.56%)</title><rect x="19.1086%" y="149" width="0.5595%" height="15" fill="rgb(232,36,49)" fg:x="13252" fg:w="388"/><text x="19.3586%" y="159.50"></text></g><g><title>rs-1brc.exe`core::f64::impl$0::max (285 samples, 0.41%)</title><rect x="19.6681%" y="181" width="0.4110%" height="15" fill="rgb(209,103,24)" fg:x="13640" fg:w="285"/><text x="19.9181%" y="191.50"></text></g><g><title>rs-1brc.exe`core::f64::impl$0::min (1,868 samples, 2.69%)</title><rect x="20.0790%" y="181" width="2.6935%" height="15" fill="rgb(229,88,8)" fg:x="13925" fg:w="1868"/><text x="20.3290%" y="191.50">rs..</text></g><g><title>rs-1brc.exe`core::ptr::drop_in_place (12 samples, 0.02%)</title><rect x="22.7726%" y="181" width="0.0173%" height="15" fill="rgb(213,181,19)" fg:x="15793" fg:w="12"/><text x="23.0226%" y="191.50"></text></g><g><title>rs-1brc.exe`core::ptr::drop_in_place (12 samples, 0.02%)</title><rect x="22.7726%" y="165" width="0.0173%" height="15" fill="rgb(254,191,54)" fg:x="15793" fg:w="12"/><text x="23.0226%" y="175.50"></text></g><g><title>rs-1brc.exe`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="22.7798%" y="149" width="0.0101%" height="15" fill="rgb(241,83,37)" fg:x="15798" fg:w="7"/><text x="23.0298%" y="159.50"></text></g><g><title>rs-1brc.exe`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="22.7798%" y="133" width="0.0101%" height="15" fill="rgb(233,36,39)" fg:x="15798" fg:w="7"/><text x="23.0298%" y="143.50"></text></g><g><title>rs-1brc.exe`std::os::windows::io::handle::impl$23::drop (7 samples, 0.01%)</title><rect x="22.7798%" y="117" width="0.0101%" height="15" fill="rgb(226,3,54)" fg:x="15798" fg:w="7"/><text x="23.0298%" y="127.50"></text></g><g><title>rs-1brc.exe`core::ops::arith::impl$217::div (12 samples, 0.02%)</title><rect x="23.3955%" y="101" width="0.0173%" height="15" fill="rgb(245,192,40)" fg:x="16225" fg:w="12"/><text x="23.6455%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::float::impl$3::from_u64 (485 samples, 0.70%)</title><rect x="23.4128%" y="101" width="0.6993%" height="15" fill="rgb(238,167,29)" fg:x="16237" fg:w="485"/><text x="23.6628%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::float::impl$3::pow10_fast_path (25 samples, 0.04%)</title><rect x="24.1121%" y="101" width="0.0360%" height="15" fill="rgb(232,182,51)" fg:x="16722" fg:w="25"/><text x="24.3621%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::number::Number::try_fast_path (1,128 samples, 1.63%)</title><rect x="22.8403%" y="117" width="1.6265%" height="15" fill="rgb(231,60,39)" fg:x="15840" fg:w="1128"/><text x="23.0903%" y="127.50"></text></g><g><title>rs-1brc.exe`fast_float::number::Number::is_fast_path (221 samples, 0.32%)</title><rect x="24.1482%" y="101" width="0.3187%" height="15" fill="rgb(208,69,12)" fg:x="16747" fg:w="221"/><text x="24.3982%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::check_first (183 samples, 0.26%)</title><rect x="31.3896%" y="101" width="0.2639%" height="15" fill="rgb(235,93,37)" fg:x="21769" fg:w="183"/><text x="31.6396%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::is_empty (144 samples, 0.21%)</title><rect x="31.4458%" y="85" width="0.2076%" height="15" fill="rgb(213,116,39)" fg:x="21808" fg:w="144"/><text x="31.6958%" y="95.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::check_first_either (189 samples, 0.27%)</title><rect x="31.6535%" y="101" width="0.2725%" height="15" fill="rgb(222,207,29)" fg:x="21952" fg:w="189"/><text x="31.9035%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::is_empty (167 samples, 0.24%)</title><rect x="31.6852%" y="85" width="0.2408%" height="15" fill="rgb(206,96,30)" fg:x="21974" fg:w="167"/><text x="31.9352%" y="95.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::first (508 samples, 0.73%)</title><rect x="31.9260%" y="101" width="0.7325%" height="15" fill="rgb(218,138,4)" fg:x="22141" fg:w="508"/><text x="32.1760%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::offset_from (46 samples, 0.07%)</title><rect x="32.6585%" y="101" width="0.0663%" height="15" fill="rgb(250,191,14)" fg:x="22649" fg:w="46"/><text x="32.9085%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::impl$5::wrapping_sub (46 samples, 0.07%)</title><rect x="32.6585%" y="85" width="0.0663%" height="15" fill="rgb(239,60,40)" fg:x="22649" fg:w="46"/><text x="32.9085%" y="95.50"></text></g><g><title>rs-1brc.exe`fast_float::number::try_parse_8digits_le (216 samples, 0.31%)</title><rect x="32.7248%" y="101" width="0.3115%" height="15" fill="rgb(206,27,48)" fg:x="22695" fg:w="216"/><text x="32.9748%" y="111.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::try_read_u64 (216 samples, 0.31%)</title><rect x="32.7248%" y="85" width="0.3115%" height="15" fill="rgb(225,35,8)" fg:x="22695" fg:w="216"/><text x="32.9748%" y="95.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::check_len (216 samples, 0.31%)</title><rect x="32.7248%" y="69" width="0.3115%" height="15" fill="rgb(250,213,24)" fg:x="22695" fg:w="216"/><text x="32.9748%" y="79.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::is_empty (1,614 samples, 2.33%)</title><rect x="33.5987%" y="69" width="2.3273%" height="15" fill="rgb(247,123,22)" fg:x="23301" fg:w="1614"/><text x="33.8487%" y="79.50">r..</text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::step (65 samples, 0.09%)</title><rect x="35.9259%" y="69" width="0.0937%" height="15" fill="rgb(231,138,38)" fg:x="24915" fg:w="65"/><text x="36.1759%" y="79.50"></text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::step_by (65 samples, 0.09%)</title><rect x="35.9259%" y="53" width="0.0937%" height="15" fill="rgb(231,145,46)" fg:x="24915" fg:w="65"/><text x="36.1759%" y="63.50"></text></g><g><title>rs-1brc.exe`core::ptr::const_ptr::impl$0::add (65 samples, 0.09%)</title><rect x="35.9259%" y="37" width="0.0937%" height="15" fill="rgb(251,118,11)" fg:x="24915" fg:w="65"/><text x="36.1759%" y="47.50"></text></g><g><title>rs-1brc.exe`fast_float::parse(ref$&lt;slice2$ (9,541 samples, 13.76%)</title><rect x="22.7985%" y="181" width="13.7576%" height="15" fill="rgb(217,147,25)" fg:x="15811" fg:w="9541"/><text x="23.0485%" y="191.50">rs-1brc.exe`fast_floa..</text></g><g><title>rs-1brc.exe`fast_float::FastFloat::parse_float(ref$&lt;slice2$ (9,541 samples, 13.76%)</title><rect x="22.7985%" y="165" width="13.7576%" height="15" fill="rgb(247,81,37)" fg:x="15811" fg:w="9541"/><text x="23.0485%" y="175.50">rs-1brc.exe`fast_floa..</text></g><g><title>rs-1brc.exe`fast_float::FastFloat::parse_float_partial(ref$&lt;slice2$ (9,541 samples, 13.76%)</title><rect x="22.7985%" y="149" width="13.7576%" height="15" fill="rgb(209,12,38)" fg:x="15811" fg:w="9541"/><text x="23.0485%" y="159.50">rs-1brc.exe`fast_floa..</text></g><g><title>rs-1brc.exe`fast_float::parse::parse_float(ref$&lt;slice2$ (9,541 samples, 13.76%)</title><rect x="22.7985%" y="133" width="13.7576%" height="15" fill="rgb(227,1,9)" fg:x="15811" fg:w="9541"/><text x="23.0485%" y="143.50">rs-1brc.exe`fast_floa..</text></g><g><title>rs-1brc.exe`fast_float::number::parse_number(ref$&lt;slice2$ (8,380 samples, 12.08%)</title><rect x="24.4726%" y="117" width="12.0835%" height="15" fill="rgb(248,47,43)" fg:x="16972" fg:w="8380"/><text x="24.7226%" y="127.50">rs-1brc.exe`fast_f..</text></g><g><title>rs-1brc.exe`fast_float::number::try_parse_digits (2,441 samples, 3.52%)</title><rect x="33.0363%" y="101" width="3.5198%" height="15" fill="rgb(221,10,30)" fg:x="22911" fg:w="2441"/><text x="33.2863%" y="111.50">rs-..</text></g><g><title>rs-1brc.exe`fast_float::common::AsciiStr::parse_digits (2,441 samples, 3.52%)</title><rect x="33.0363%" y="85" width="3.5198%" height="15" fill="rgb(210,229,1)" fg:x="22911" fg:w="2441"/><text x="33.2863%" y="95.50">rs-..</text></g><g><title>rs-1brc.exe`fast_float::number::try_parse_digits::closure$0 (372 samples, 0.54%)</title><rect x="36.0197%" y="69" width="0.5364%" height="15" fill="rgb(222,148,37)" fg:x="24980" fg:w="372"/><text x="36.2697%" y="79.50"></text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_mul (138 samples, 0.20%)</title><rect x="36.3571%" y="53" width="0.1990%" height="15" fill="rgb(234,67,33)" fg:x="25214" fg:w="138"/><text x="36.6071%" y="63.50"></text></g><g><title>rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::first_set(core::core_simd::masks::Mask (31,860 samples, 45.94%)</title><rect x="39.7298%" y="165" width="45.9402%" height="15" fill="rgb(247,98,35)" fg:x="27553" fg:w="31860"/><text x="39.9798%" y="175.50">rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::first_set(core::core_simd:..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::to_bitmask(core::core_simd::masks::Mask (26,673 samples, 38.46%)</title><rect x="47.2091%" y="149" width="38.4609%" height="15" fill="rgb(247,138,52)" fg:x="32740" fg:w="26673"/><text x="47.4591%" y="159.50">rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::to_bitmask(cor..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_bitmask_integer(core::core_simd::masks::mask_impl::Mask (26,673 samples, 38.46%)</title><rect x="47.2091%" y="133" width="38.4609%" height="15" fill="rgb(213,79,30)" fg:x="32740" fg:w="26673"/><text x="47.4591%" y="143.50">rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_bitmask_impl(core::core_simd::masks::mask_impl::Mask (26,673 samples, 38.46%)</title><rect x="47.2091%" y="117" width="38.4609%" height="15" fill="rgb(246,177,23)" fg:x="32740" fg:w="26673"/><text x="47.4591%" y="127.50">rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_..</text></g><g><title>rs-1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (1,064 samples, 1.53%)</title><rect x="85.6700%" y="165" width="1.5342%" height="15" fill="rgb(230,62,27)" fg:x="59413" fg:w="1064"/><text x="85.9200%" y="175.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (1,064 samples, 1.53%)</title><rect x="85.6700%" y="149" width="1.5342%" height="15" fill="rgb(216,154,8)" fg:x="59413" fg:w="1064"/><text x="85.9200%" y="159.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (53 samples, 0.08%)</title><rect x="87.2042%" y="165" width="0.0764%" height="15" fill="rgb(244,35,45)" fg:x="60477" fg:w="53"/><text x="87.4542%" y="175.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (53 samples, 0.08%)</title><rect x="87.2042%" y="149" width="0.0764%" height="15" fill="rgb(251,115,12)" fg:x="60477" fg:w="53"/><text x="87.4542%" y="159.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (53 samples, 0.08%)</title><rect x="87.2042%" y="133" width="0.0764%" height="15" fill="rgb(240,54,50)" fg:x="60477" fg:w="53"/><text x="87.4542%" y="143.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (53 samples, 0.08%)</title><rect x="87.2042%" y="117" width="0.0764%" height="15" fill="rgb(233,84,52)" fg:x="60477" fg:w="53"/><text x="87.4542%" y="127.50"></text></g><g><title>rs-1brc.exe`core::ptr::const_ptr::impl$0::add (53 samples, 0.08%)</title><rect x="87.2042%" y="101" width="0.0764%" height="15" fill="rgb(207,117,47)" fg:x="60477" fg:w="53"/><text x="87.4542%" y="111.50"></text></g><g><title>rs-1brc.exe`rs_1brc::timeit (69,322 samples, 99.96%)</title><rect x="0.0144%" y="229" width="99.9582%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="69322"/><text x="0.2644%" y="239.50">rs-1brc.exe`rs_1brc::timeit</text></g><g><title>rs-1brc.exe`rs_1brc::main::closure$0 (69,322 samples, 99.96%)</title><rect x="0.0144%" y="213" width="99.9582%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="69322"/><text x="0.2644%" y="223.50">rs-1brc.exe`rs_1brc::main::closure$0</text></g><g><title>rs-1brc.exe`rs_1brc::approach_7::run(ref$ (69,322 samples, 99.96%)</title><rect x="0.0144%" y="197" width="99.9582%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="69322"/><text x="0.2644%" y="207.50">rs-1brc.exe`rs_1brc::approach_7::run(ref$</text></g><g><title>rs-1brc.exe`rs_1brc::approach_7::next (43,979 samples, 63.42%)</title><rect x="36.5575%" y="181" width="63.4151%" height="15" fill="rgb(242,79,21)" fg:x="25353" fg:w="43979"/><text x="36.8075%" y="191.50">rs-1brc.exe`rs_1brc::approach_7::next</text></g><g><title>rs-1brc.exe`rs_1brc::approach_7::fill_by_slice(ref$&lt;slice2$ (8,802 samples, 12.69%)</title><rect x="87.2806%" y="165" width="12.6920%" height="15" fill="rgb(211,96,35)" fg:x="60530" fg:w="8802"/><text x="87.5306%" y="175.50">rs-1brc.exe`rs_1brc..</text></g><g><title>rs-1brc.exe`core::core_simd::vector::Simd&lt;u8,32&gt;::from_slice(ref$&lt;slice2$ (8,760 samples, 12.63%)</title><rect x="87.3412%" y="149" width="12.6314%" height="15" fill="rgb(253,215,40)" fg:x="60572" fg:w="8760"/><text x="87.5912%" y="159.50">rs-1brc.exe`core::c..</text></g><g><title>`0x7FFFBAA4AA48 (69,333 samples, 99.97%)</title><rect x="0.0000%" y="453" width="99.9740%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="69333"/><text x="0.2500%" y="463.50">`0x7FFFBAA4AA48</text></g><g><title>`0x7FFFB9AF257D (69,333 samples, 99.97%)</title><rect x="0.0000%" y="437" width="99.9740%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="69333"/><text x="0.2500%" y="447.50">`0x7FFFB9AF257D</text></g><g><title>rs-1brc.exe`__scrt_common_main_seh() (69,327 samples, 99.97%)</title><rect x="0.0087%" y="421" width="99.9654%" height="15" fill="rgb(235,213,38)" fg:x="6" fg:w="69327"/><text x="0.2587%" y="431.50">rs-1brc.exe`__scrt_common_main_seh()</text></g><g><title>rs-1brc.exe`invoke_main() (69,323 samples, 99.96%)</title><rect x="0.0144%" y="405" width="99.9596%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="415.50">rs-1brc.exe`invoke_main()</text></g><g><title>rs-1brc.exe`main (69,323 samples, 99.96%)</title><rect x="0.0144%" y="389" width="99.9596%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="399.50">rs-1brc.exe`main</text></g><g><title>rs-1brc.exe`std::rt::lang_start_internal (69,323 samples, 99.96%)</title><rect x="0.0144%" y="373" width="99.9596%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="383.50">rs-1brc.exe`std::rt::lang_start_internal</text></g><g><title>rs-1brc.exe`std::panic::catch_unwind (69,323 samples, 99.96%)</title><rect x="0.0144%" y="357" width="99.9596%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="367.50">rs-1brc.exe`std::panic::catch_unwind</text></g><g><title>rs-1brc.exe`std::panicking::try (69,323 samples, 99.96%)</title><rect x="0.0144%" y="341" width="99.9596%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="351.50">rs-1brc.exe`std::panicking::try</text></g><g><title>rs-1brc.exe`std::panicking::try::do_call (69,323 samples, 99.96%)</title><rect x="0.0144%" y="325" width="99.9596%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="335.50">rs-1brc.exe`std::panicking::try::do_call</text></g><g><title>rs-1brc.exe`std::rt::lang_start_internal::closure$2 (69,323 samples, 99.96%)</title><rect x="0.0144%" y="309" width="99.9596%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="319.50">rs-1brc.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>rs-1brc.exe`std::panic::catch_unwind (69,323 samples, 99.96%)</title><rect x="0.0144%" y="293" width="99.9596%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="303.50">rs-1brc.exe`std::panic::catch_unwind</text></g><g><title>rs-1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (69,323 samples, 99.96%)</title><rect x="0.0144%" y="277" width="99.9596%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="287.50">rs-1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>rs-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (69,323 samples, 99.96%)</title><rect x="0.0144%" y="261" width="99.9596%" height="15" fill="rgb(228,99,48)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="271.50">rs-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>rs-1brc.exe`rs_1brc::main (69,323 samples, 99.96%)</title><rect x="0.0144%" y="245" width="99.9596%" height="15" fill="rgb(253,11,6)" fg:x="10" fg:w="69323"/><text x="0.2644%" y="255.50">rs-1brc.exe`rs_1brc::main</text></g><g><title>`0x7FFFBAA63EA3 (16 samples, 0.02%)</title><rect x="99.9755%" y="437" width="0.0231%" height="15" fill="rgb(247,143,39)" fg:x="69334" fg:w="16"/><text x="100.2255%" y="447.50"></text></g><g><title>`0x7FFFBAABA144 (16 samples, 0.02%)</title><rect x="99.9755%" y="421" width="0.0231%" height="15" fill="rgb(236,97,10)" fg:x="69334" fg:w="16"/><text x="100.2255%" y="431.50"></text></g><g><title>all (69,351 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="69351"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FFFBAA63DCE (17 samples, 0.02%)</title><rect x="99.9755%" y="453" width="0.0245%" height="15" fill="rgb(216,164,2)" fg:x="69334" fg:w="17"/><text x="100.2255%" y="463.50"></text></g></svg></svg>