<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="30433"><g><title>`0x7FFD400FC099 (4 samples, 0.01%)</title><rect x="0.0066%" y="453" width="0.0131%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="4"/><text x="0.2566%" y="463.50"></text></g><g><title>rs-1brc.exe`core::str::impl$0::parse(ref$ (147 samples, 0.48%)</title><rect x="3.8478%" y="229" width="0.4830%" height="15" fill="rgb(217,0,24)" fg:x="1171" fg:w="147"/><text x="4.0978%" y="239.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::float::impl$1::from_u64 (226 samples, 0.74%)</title><rect x="13.8632%" y="165" width="0.7426%" height="15" fill="rgb(221,193,54)" fg:x="4219" fg:w="226"/><text x="14.1132%" y="175.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::number::Number::is_fast_path (156 samples, 0.51%)</title><rect x="14.6124%" y="165" width="0.5126%" height="15" fill="rgb(248,212,6)" fg:x="4447" fg:w="156"/><text x="14.8624%" y="175.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::number::Number::try_fast_path (892 samples, 2.93%)</title><rect x="13.7187%" y="181" width="2.9310%" height="15" fill="rgb(208,68,35)" fg:x="4175" fg:w="892"/><text x="13.9687%" y="191.50">rs..</text></g><g><title>rs-1brc.exe`core::ops::arith::impl$217::div (464 samples, 1.52%)</title><rect x="15.1250%" y="165" width="1.5247%" height="15" fill="rgb(232,128,0)" fg:x="4603" fg:w="464"/><text x="15.3750%" y="175.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (827 samples, 2.72%)</title><rect x="26.9674%" y="117" width="2.7174%" height="15" fill="rgb(207,160,47)" fg:x="8207" fg:w="827"/><text x="27.2174%" y="127.50">rs..</text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_mul (336 samples, 1.10%)</title><rect x="28.5808%" y="101" width="1.1041%" height="15" fill="rgb(228,23,34)" fg:x="8698" fg:w="336"/><text x="28.8308%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::try_parse_digits (2,043 samples, 6.71%)</title><rect x="23.4088%" y="149" width="6.7131%" height="15" fill="rgb(218,30,26)" fg:x="7124" fg:w="2043"/><text x="23.6588%" y="159.50">rs-1brc.e..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::common::impl$0::parse_digits (1,852 samples, 6.09%)</title><rect x="24.0364%" y="133" width="6.0855%" height="15" fill="rgb(220,122,19)" fg:x="7315" fg:w="1852"/><text x="24.2864%" y="143.50">rs-1brc...</text></g><g><title>rs-1brc.exe`core::num::impl$6::wrapping_sub (133 samples, 0.44%)</title><rect x="29.6849%" y="117" width="0.4370%" height="15" fill="rgb(250,228,42)" fg:x="9034" fg:w="133"/><text x="29.9349%" y="127.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::parse_number (4,413 samples, 14.50%)</title><rect x="16.6497%" y="181" width="14.5007%" height="15" fill="rgb(240,193,28)" fg:x="5067" fg:w="4413"/><text x="16.8997%" y="191.50">rs-1brc.exe`core::num:..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::parse_partial_number (2,982 samples, 9.80%)</title><rect x="21.3518%" y="165" width="9.7986%" height="15" fill="rgb(216,20,37)" fg:x="6498" fg:w="2982"/><text x="21.6018%" y="175.50">rs-1brc.exe`co..</text></g><g><title>rs-1brc.exe`core::slice::impl$0::split_first (313 samples, 1.03%)</title><rect x="30.1219%" y="149" width="1.0285%" height="15" fill="rgb(206,188,39)" fg:x="9167" fg:w="313"/><text x="30.3719%" y="159.50"></text></g><g><title>rs-1brc.exe`enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;::unwrap(enum2$&lt;core::result::Result (8,176 samples, 26.87%)</title><rect x="4.3308%" y="229" width="26.8656%" height="15" fill="rgb(217,207,13)" fg:x="1318" fg:w="8176"/><text x="4.5808%" y="239.50">rs-1brc.exe`enum2$&lt;core::result::Result&lt;f64..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::impl$3::from_str (8,106 samples, 26.64%)</title><rect x="4.5608%" y="213" width="26.6356%" height="15" fill="rgb(231,73,38)" fg:x="1388" fg:w="8106"/><text x="4.8108%" y="223.50">rs-1brc.exe`core::num::dec2flt::impl$3::fro..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::dec2flt (6,685 samples, 21.97%)</title><rect x="9.2301%" y="197" width="21.9663%" height="15" fill="rgb(225,20,46)" fg:x="2809" fg:w="6685"/><text x="9.4801%" y="207.50">rs-1brc.exe`core::num::dec2flt::dec..</text></g><g><title>rs-1brc.exe`core::slice::impl$0::first (14 samples, 0.05%)</title><rect x="31.1504%" y="181" width="0.0460%" height="15" fill="rgb(210,31,41)" fg:x="9480" fg:w="14"/><text x="31.4004%" y="191.50"></text></g><g><title>rs-1brc.exe`core::f64::impl$0::max (238 samples, 0.78%)</title><rect x="34.5447%" y="197" width="0.7820%" height="15" fill="rgb(221,200,47)" fg:x="10513" fg:w="238"/><text x="34.7947%" y="207.50"></text></g><g><title>rs-1brc.exe`enum2$&lt;hashbrown::map::Entry&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt; &gt;::and_modify(enum2$&lt;hashbrown::map::Entry&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data,core::hash::BuildHasherDefault (1,669 samples, 5.48%)</title><rect x="31.1964%" y="229" width="5.4842%" height="15" fill="rgb(226,26,5)" fg:x="9494" fg:w="1669"/><text x="31.4464%" y="239.50">rs-1brc..</text></g><g><title>rs-1brc.exe`rs_1brc::approach_4::run::closure$0 (1,669 samples, 5.48%)</title><rect x="31.1964%" y="213" width="5.4842%" height="15" fill="rgb(249,33,26)" fg:x="9494" fg:w="1669"/><text x="31.4464%" y="223.50">rs-1brc..</text></g><g><title>rs-1brc.exe`core::f64::impl$0::min (412 samples, 1.35%)</title><rect x="35.3268%" y="197" width="1.3538%" height="15" fill="rgb(235,183,28)" fg:x="10751" fg:w="412"/><text x="35.5768%" y="207.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::finish (131 samples, 0.43%)</title><rect x="36.6839%" y="197" width="0.4305%" height="15" fill="rgb(221,5,38)" fg:x="11164" fg:w="131"/><text x="36.9339%" y="207.50"></text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (131 samples, 0.43%)</title><rect x="36.6839%" y="181" width="0.4305%" height="15" fill="rgb(247,18,42)" fg:x="11164" fg:w="131"/><text x="36.9339%" y="191.50"></text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (14 samples, 0.05%)</title><rect x="37.0683%" y="165" width="0.0460%" height="15" fill="rgb(241,131,45)" fg:x="11281" fg:w="14"/><text x="37.3183%" y="175.50"></text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (38 samples, 0.12%)</title><rect x="37.5053%" y="117" width="0.1249%" height="15" fill="rgb(249,31,29)" fg:x="11414" fg:w="38"/><text x="37.7553%" y="127.50"></text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (7 samples, 0.02%)</title><rect x="37.6072%" y="101" width="0.0230%" height="15" fill="rgb(225,111,53)" fg:x="11445" fg:w="7"/><text x="37.8572%" y="111.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::AHasher::large_update (136 samples, 0.45%)</title><rect x="37.2950%" y="133" width="0.4469%" height="15" fill="rgb(238,160,17)" fg:x="11350" fg:w="136"/><text x="37.5450%" y="143.50"></text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_add (31 samples, 0.10%)</title><rect x="37.6401%" y="117" width="0.1019%" height="15" fill="rgb(214,148,48)" fg:x="11455" fg:w="31"/><text x="37.8901%" y="127.50"></text></g><g><title>rs-1brc.exe`ahash::convert::impl$0::read_last_u32(ref$&lt;slice2$ (17 samples, 0.06%)</title><rect x="37.7518%" y="117" width="0.0559%" height="15" fill="rgb(232,36,49)" fg:x="11489" fg:w="17"/><text x="38.0018%" y="127.50"></text></g><g><title>rs-1brc.exe`ahash::operations::read_small(ref$&lt;slice2$ (21 samples, 0.07%)</title><rect x="37.7419%" y="133" width="0.0690%" height="15" fill="rgb(209,103,24)" fg:x="11486" fg:w="21"/><text x="37.9919%" y="143.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (220 samples, 0.72%)</title><rect x="37.1143%" y="149" width="0.7229%" height="15" fill="rgb(229,88,8)" fg:x="11295" fg:w="220"/><text x="37.3643%" y="159.50"></text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_mul (8 samples, 0.03%)</title><rect x="37.8109%" y="133" width="0.0263%" height="15" fill="rgb(213,181,19)" fg:x="11507" fg:w="8"/><text x="38.0609%" y="143.50"></text></g><g><title>rs-1brc.exe`hashbrown::map::make_hash(core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;*, enum2$&lt;alloc::borrow::Cow (481 samples, 1.58%)</title><rect x="36.6839%" y="213" width="1.5805%" height="15" fill="rgb(254,191,54)" fg:x="11164" fg:w="481"/><text x="36.9339%" y="223.50"></text></g><g><title>rs-1brc.exe`alloc::borrow::impl$12::hash(enum2$&lt;alloc::borrow::Cow (350 samples, 1.15%)</title><rect x="37.1143%" y="197" width="1.1501%" height="15" fill="rgb(241,83,37)" fg:x="11295" fg:w="350"/><text x="37.3643%" y="207.50"></text></g><g><title>rs-1brc.exe`core::hash::impls::impl$2::hash(ref$ (350 samples, 1.15%)</title><rect x="37.1143%" y="181" width="1.1501%" height="15" fill="rgb(233,36,39)" fg:x="11295" fg:w="350"/><text x="37.3643%" y="191.50"></text></g><g><title>rs-1brc.exe`core::hash::Hasher::write_str(ahash::fallback_hash::AHasher*, ref$ (350 samples, 1.15%)</title><rect x="37.1143%" y="165" width="1.1501%" height="15" fill="rgb(226,3,54)" fg:x="11295" fg:w="350"/><text x="37.3643%" y="175.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::write_u8 (130 samples, 0.43%)</title><rect x="37.8372%" y="149" width="0.4272%" height="15" fill="rgb(245,192,40)" fg:x="11515" fg:w="130"/><text x="38.0872%" y="159.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::AHasher::update (130 samples, 0.43%)</title><rect x="37.8372%" y="133" width="0.4272%" height="15" fill="rgb(238,167,29)" fg:x="11515" fg:w="130"/><text x="38.0872%" y="143.50"></text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (98 samples, 0.32%)</title><rect x="37.9424%" y="117" width="0.3220%" height="15" fill="rgb(232,182,51)" fg:x="11547" fg:w="98"/><text x="38.1924%" y="127.50"></text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (23 samples, 0.08%)</title><rect x="38.1888%" y="101" width="0.0756%" height="15" fill="rgb(231,60,39)" fg:x="11622" fg:w="23"/><text x="38.4388%" y="111.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::RawTableInner::probe_seq (236 samples, 0.78%)</title><rect x="38.5831%" y="181" width="0.7755%" height="15" fill="rgb(208,69,12)" fg:x="11742" fg:w="236"/><text x="38.8331%" y="191.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::bitmask::impl$3::next (226 samples, 0.74%)</title><rect x="39.3586%" y="181" width="0.7426%" height="15" fill="rgb(235,93,37)" fg:x="11978" fg:w="226"/><text x="39.6086%" y="191.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (226 samples, 0.74%)</title><rect x="39.3586%" y="165" width="0.7426%" height="15" fill="rgb(213,116,39)" fg:x="11978" fg:w="226"/><text x="39.6086%" y="175.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros(core::num::nonzero::NonZero (67 samples, 0.22%)</title><rect x="39.8811%" y="149" width="0.2202%" height="15" fill="rgb(222,207,29)" fg:x="12137" fg:w="67"/><text x="40.1311%" y="159.50"></text></g><g><title>rs-1brc.exe`core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros(core::num::nonzero::NonZero (67 samples, 0.22%)</title><rect x="39.8811%" y="133" width="0.2202%" height="15" fill="rgb(206,96,30)" fg:x="12137" fg:w="67"/><text x="40.1311%" y="143.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::h2 (47 samples, 0.15%)</title><rect x="40.1012%" y="181" width="0.1544%" height="15" fill="rgb(218,138,4)" fg:x="12204" fg:w="47"/><text x="40.3512%" y="191.50"></text></g><g><title>`0x7FFD28C60FC0 (79 samples, 0.26%)</title><rect x="43.4495%" y="37" width="0.2596%" height="15" fill="rgb(250,191,14)" fg:x="13223" fg:w="79"/><text x="43.6995%" y="47.50"></text></g><g><title>`0x7FFD28C60FC3 (45 samples, 0.15%)</title><rect x="43.7091%" y="37" width="0.1479%" height="15" fill="rgb(239,60,40)" fg:x="13302" fg:w="45"/><text x="43.9591%" y="47.50"></text></g><g><title>`0x7FFD28C60FC7 (5 samples, 0.02%)</title><rect x="43.8570%" y="37" width="0.0164%" height="15" fill="rgb(206,27,48)" fg:x="13347" fg:w="5"/><text x="44.1070%" y="47.50"></text></g><g><title>`0x7FFD28C60FCC (65 samples, 0.21%)</title><rect x="43.8734%" y="37" width="0.2136%" height="15" fill="rgb(225,35,8)" fg:x="13352" fg:w="65"/><text x="44.1234%" y="47.50"></text></g><g><title>`0x7FFD28C60FD2 (220 samples, 0.72%)</title><rect x="44.0903%" y="37" width="0.7229%" height="15" fill="rgb(250,213,24)" fg:x="13418" fg:w="220"/><text x="44.3403%" y="47.50"></text></g><g><title>`0x7FFD28C60FD5 (241 samples, 0.79%)</title><rect x="44.8132%" y="37" width="0.7919%" height="15" fill="rgb(247,123,22)" fg:x="13638" fg:w="241"/><text x="45.0632%" y="47.50"></text></g><g><title>`0x7FFD28C60FDA (266 samples, 0.87%)</title><rect x="45.6051%" y="37" width="0.8741%" height="15" fill="rgb(231,138,38)" fg:x="13879" fg:w="266"/><text x="45.8551%" y="47.50"></text></g><g><title>`0x7FFD28C60FE0 (31 samples, 0.10%)</title><rect x="46.4857%" y="37" width="0.1019%" height="15" fill="rgb(231,145,46)" fg:x="14147" fg:w="31"/><text x="46.7357%" y="47.50"></text></g><g><title>`0x7FFD28C60FE5 (185 samples, 0.61%)</title><rect x="46.5876%" y="37" width="0.6079%" height="15" fill="rgb(251,118,11)" fg:x="14178" fg:w="185"/><text x="46.8376%" y="47.50"></text></g><g><title>`0x7FFD28C60FEE (59 samples, 0.19%)</title><rect x="47.2021%" y="37" width="0.1939%" height="15" fill="rgb(217,147,25)" fg:x="14365" fg:w="59"/><text x="47.4521%" y="47.50"></text></g><g><title>`0x7FFD28C60FF2 (283 samples, 0.93%)</title><rect x="47.3959%" y="37" width="0.9299%" height="15" fill="rgb(247,81,37)" fg:x="14424" fg:w="283"/><text x="47.6459%" y="47.50"></text></g><g><title>`0x7FFD28C60FF5 (492 samples, 1.62%)</title><rect x="48.3258%" y="37" width="1.6167%" height="15" fill="rgb(209,12,38)" fg:x="14707" fg:w="492"/><text x="48.5758%" y="47.50"></text></g><g><title>`0x7FFD28C60FFA (844 samples, 2.77%)</title><rect x="49.9425%" y="37" width="2.7733%" height="15" fill="rgb(227,1,9)" fg:x="15199" fg:w="844"/><text x="50.1925%" y="47.50">`0..</text></g><g><title>`0x7FFD28C61002 (275 samples, 0.90%)</title><rect x="52.7158%" y="37" width="0.9036%" height="15" fill="rgb(248,47,43)" fg:x="16043" fg:w="275"/><text x="52.9658%" y="47.50"></text></g><g><title>`0x7FFD28C61005 (4 samples, 0.01%)</title><rect x="53.6194%" y="37" width="0.0131%" height="15" fill="rgb(221,10,30)" fg:x="16318" fg:w="4"/><text x="53.8694%" y="47.50"></text></g><g><title>`0x7FFD28C6100E (46 samples, 0.15%)</title><rect x="53.6391%" y="37" width="0.1512%" height="15" fill="rgb(210,229,1)" fg:x="16324" fg:w="46"/><text x="53.8891%" y="47.50"></text></g><g><title>`0x7FFD28C61047 (5 samples, 0.02%)</title><rect x="53.7903%" y="37" width="0.0164%" height="15" fill="rgb(222,148,37)" fg:x="16370" fg:w="5"/><text x="54.0403%" y="47.50"></text></g><g><title>`0x7FFD28C6104A (4 samples, 0.01%)</title><rect x="53.8067%" y="37" width="0.0131%" height="15" fill="rgb(234,67,33)" fg:x="16375" fg:w="4"/><text x="54.0567%" y="47.50"></text></g><g><title>`0x7FFD28C6104E (16 samples, 0.05%)</title><rect x="53.8199%" y="37" width="0.0526%" height="15" fill="rgb(247,98,35)" fg:x="16379" fg:w="16"/><text x="54.0699%" y="47.50"></text></g><g><title>`0x7FFD28C61050 (49 samples, 0.16%)</title><rect x="53.8724%" y="37" width="0.1610%" height="15" fill="rgb(247,138,52)" fg:x="16395" fg:w="49"/><text x="54.1224%" y="47.50"></text></g><g><title>`0x7FFD28C61053 (7 samples, 0.02%)</title><rect x="54.0335%" y="37" width="0.0230%" height="15" fill="rgb(213,79,30)" fg:x="16444" fg:w="7"/><text x="54.2835%" y="47.50"></text></g><g><title>`0x7FFD28C61057 (34 samples, 0.11%)</title><rect x="54.0565%" y="37" width="0.1117%" height="15" fill="rgb(246,177,23)" fg:x="16451" fg:w="34"/><text x="54.3065%" y="47.50"></text></g><g><title>`0x7FFD28C6105D (29 samples, 0.10%)</title><rect x="54.1682%" y="37" width="0.0953%" height="15" fill="rgb(230,62,27)" fg:x="16485" fg:w="29"/><text x="54.4182%" y="47.50"></text></g><g><title>`0x7FFD28C61060 (19 samples, 0.06%)</title><rect x="54.2635%" y="37" width="0.0624%" height="15" fill="rgb(216,154,8)" fg:x="16514" fg:w="19"/><text x="54.5135%" y="47.50"></text></g><g><title>rs-1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data&gt;*, tuple$&lt;enum2$&lt;alloc::borrow::Cow (4,438 samples, 14.58%)</title><rect x="40.2556%" y="165" width="14.5829%" height="15" fill="rgb(244,35,45)" fg:x="12251" fg:w="4438"/><text x="40.5056%" y="175.50">rs-1brc.exe`hashbrown:..</text></g><g><title>rs-1brc.exe`hashbrown::impl$0::equivalent(enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;*, enum2$&lt;alloc::borrow::Cow (4,438 samples, 14.58%)</title><rect x="40.2556%" y="149" width="14.5829%" height="15" fill="rgb(251,115,12)" fg:x="12251" fg:w="4438"/><text x="40.5056%" y="159.50">rs-1brc.exe`hashbrown:..</text></g><g><title>rs-1brc.exe`core::cmp::impls::impl$9::eq(enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;**, enum2$&lt;alloc::borrow::Cow (4,438 samples, 14.58%)</title><rect x="40.2556%" y="133" width="14.5829%" height="15" fill="rgb(240,54,50)" fg:x="12251" fg:w="4438"/><text x="40.5056%" y="143.50">rs-1brc.exe`core::cmp:..</text></g><g><title>rs-1brc.exe`alloc::borrow::impl$7::eq(enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;*, enum2$&lt;alloc::borrow::Cow (4,334 samples, 14.24%)</title><rect x="40.5974%" y="117" width="14.2411%" height="15" fill="rgb(233,84,52)" fg:x="12355" fg:w="4334"/><text x="40.8474%" y="127.50">rs-1brc.exe`alloc::bor..</text></g><g><title>rs-1brc.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (4,334 samples, 14.24%)</title><rect x="40.5974%" y="101" width="14.2411%" height="15" fill="rgb(207,117,47)" fg:x="12355" fg:w="4334"/><text x="40.8474%" y="111.50">rs-1brc.exe`core::str:..</text></g><g><title>rs-1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (4,334 samples, 14.24%)</title><rect x="40.5974%" y="85" width="14.2411%" height="15" fill="rgb(249,43,39)" fg:x="12355" fg:w="4334"/><text x="40.8474%" y="95.50">rs-1brc.exe`core::cmp:..</text></g><g><title>rs-1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (4,334 samples, 14.24%)</title><rect x="40.5974%" y="69" width="14.2411%" height="15" fill="rgb(209,38,44)" fg:x="12355" fg:w="4334"/><text x="40.8474%" y="79.50">rs-1brc.exe`core::slic..</text></g><g><title>rs-1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (4,334 samples, 14.24%)</title><rect x="40.5974%" y="53" width="14.2411%" height="15" fill="rgb(236,212,23)" fg:x="12355" fg:w="4334"/><text x="40.8474%" y="63.50">rs-1brc.exe`core::slic..</text></g><g><title>rs-1brc.exe`memcmp (155 samples, 0.51%)</title><rect x="54.3292%" y="37" width="0.5093%" height="15" fill="rgb(242,79,21)" fg:x="16534" fg:w="155"/><text x="54.5792%" y="47.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data&gt; &gt;::as_ptr (11 samples, 0.04%)</title><rect x="54.8385%" y="149" width="0.0361%" height="15" fill="rgb(211,96,35)" fg:x="16689" fg:w="11"/><text x="55.0885%" y="159.50"></text></g><g><title>rs-1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;enum2$&lt;alloc::borrow::Cow (11 samples, 0.04%)</title><rect x="54.8385%" y="133" width="0.0361%" height="15" fill="rgb(253,215,40)" fg:x="16689" fg:w="11"/><text x="55.0885%" y="143.50"></text></g><g><title>rs-1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;enum2$&lt;alloc::borrow::Cow (11 samples, 0.04%)</title><rect x="54.8385%" y="117" width="0.0361%" height="15" fill="rgb(211,81,21)" fg:x="16689" fg:w="11"/><text x="55.0885%" y="127.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,enum2$&lt;alloc::borrow::Cow (4,471 samples, 14.69%)</title><rect x="40.2556%" y="181" width="14.6913%" height="15" fill="rgb(208,190,38)" fg:x="12251" fg:w="4471"/><text x="40.5056%" y="191.50">rs-1brc.exe`hashbrown:..</text></g><g><title>rs-1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data&gt;,allocator_api2::stable::alloc::global::Global&gt;::bucket (33 samples, 0.11%)</title><rect x="54.8385%" y="165" width="0.1084%" height="15" fill="rgb(235,213,38)" fg:x="16689" fg:w="33"/><text x="55.0885%" y="175.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;enum2$&lt;alloc::borrow::Cow (22 samples, 0.07%)</title><rect x="54.8746%" y="149" width="0.0723%" height="15" fill="rgb(237,122,38)" fg:x="16700" fg:w="22"/><text x="55.1246%" y="159.50"></text></g><g><title>rs-1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;enum2$&lt;alloc::borrow::Cow (22 samples, 0.07%)</title><rect x="54.8746%" y="133" width="0.0723%" height="15" fill="rgb(244,218,35)" fg:x="16700" fg:w="22"/><text x="55.1246%" y="143.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::sse2::Group::load (23 samples, 0.08%)</title><rect x="54.9469%" y="181" width="0.0756%" height="15" fill="rgb(240,68,47)" fg:x="16722" fg:w="23"/><text x="55.1969%" y="191.50"></text></g><g><title>rs-1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (23 samples, 0.08%)</title><rect x="54.9469%" y="165" width="0.0756%" height="15" fill="rgb(210,16,53)" fg:x="16722" fg:w="23"/><text x="55.1969%" y="175.50"></text></g><g><title>rs-1brc.exe`core::intrinsics::copy_nonoverlapping (23 samples, 0.08%)</title><rect x="54.9469%" y="149" width="0.0756%" height="15" fill="rgb(235,124,12)" fg:x="16722" fg:w="23"/><text x="55.1969%" y="159.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::sse2::Group::match_byte (56 samples, 0.18%)</title><rect x="55.0225%" y="181" width="0.1840%" height="15" fill="rgb(224,169,11)" fg:x="16745" fg:w="56"/><text x="55.2725%" y="191.50"></text></g><g><title>rs-1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (56 samples, 0.18%)</title><rect x="55.0225%" y="165" width="0.1840%" height="15" fill="rgb(250,166,2)" fg:x="16745" fg:w="56"/><text x="55.2725%" y="175.50"></text></g><g><title>rs-1brc.exe`hashbrown::map::HashMap&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::entry(enum2$&lt;alloc::borrow::Cow (5,669 samples, 18.63%)</title><rect x="36.6839%" y="229" width="18.6278%" height="15" fill="rgb(242,216,29)" fg:x="11164" fg:w="5669"/><text x="36.9339%" y="239.50">rs-1brc.exe`hashbrown::map::H..</text></g><g><title>rs-1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,rs_1brc::approach_4::Data&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;enum2$&lt;alloc::borrow::Cow&lt;str$&gt; &gt;,enum2$&lt;alloc::borrow::Cow (5,188 samples, 17.05%)</title><rect x="38.2644%" y="213" width="17.0473%" height="15" fill="rgb(230,116,27)" fg:x="11645" fg:w="5188"/><text x="38.5144%" y="223.50">rs-1brc.exe`hashbrown::raw..</text></g><g><title>rs-1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (5,188 samples, 17.05%)</title><rect x="38.2644%" y="197" width="17.0473%" height="15" fill="rgb(228,99,48)" fg:x="11645" fg:w="5188"/><text x="38.5144%" y="207.50">rs-1brc.exe`hashbrown::raw..</text></g><g><title>rs-1brc.exe`hashbrown::raw::sse2::Group::match_empty (32 samples, 0.11%)</title><rect x="55.2065%" y="181" width="0.1051%" height="15" fill="rgb(253,11,6)" fg:x="16801" fg:w="32"/><text x="55.4565%" y="191.50"></text></g><g><title>rs-1brc.exe`hashbrown::raw::sse2::Group::match_byte (32 samples, 0.11%)</title><rect x="55.2065%" y="165" width="0.1051%" height="15" fill="rgb(247,143,39)" fg:x="16801" fg:w="32"/><text x="55.4565%" y="175.50"></text></g><g><title>rs-1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (32 samples, 0.11%)</title><rect x="55.2065%" y="149" width="0.1051%" height="15" fill="rgb(236,97,10)" fg:x="16801" fg:w="32"/><text x="55.4565%" y="159.50"></text></g><g><title>rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::first_set(core::core_simd::masks::Mask (4,260 samples, 14.00%)</title><rect x="62.1956%" y="213" width="13.9980%" height="15" fill="rgb(233,208,19)" fg:x="18928" fg:w="4260"/><text x="62.4456%" y="223.50">rs-1brc.exe`core::cor..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::to_bitmask(core::core_simd::masks::Mask (4,114 samples, 13.52%)</title><rect x="62.6754%" y="197" width="13.5182%" height="15" fill="rgb(216,164,2)" fg:x="19074" fg:w="4114"/><text x="62.9254%" y="207.50">rs-1brc.exe`core::co..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_bitmask_integer(core::core_simd::masks::mask_impl::Mask (4,114 samples, 13.52%)</title><rect x="62.6754%" y="181" width="13.5182%" height="15" fill="rgb(220,129,5)" fg:x="19074" fg:w="4114"/><text x="62.9254%" y="191.50">rs-1brc.exe`core::co..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_bitmask_impl(core::core_simd::masks::mask_impl::Mask (4,114 samples, 13.52%)</title><rect x="62.6754%" y="165" width="13.5182%" height="15" fill="rgb(242,17,10)" fg:x="19074" fg:w="4114"/><text x="62.9254%" y="175.50">rs-1brc.exe`core::co..</text></g><g><title>rs-1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (1,243 samples, 4.08%)</title><rect x="76.1936%" y="213" width="4.0844%" height="15" fill="rgb(242,107,0)" fg:x="23188" fg:w="1243"/><text x="76.4436%" y="223.50">rs-1..</text></g><g><title>rs-1brc.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (1,243 samples, 4.08%)</title><rect x="76.1936%" y="197" width="4.0844%" height="15" fill="rgb(251,28,31)" fg:x="23188" fg:w="1243"/><text x="76.4436%" y="207.50">rs-1..</text></g><g><title>rs-1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (44 samples, 0.14%)</title><rect x="80.2780%" y="213" width="0.1446%" height="15" fill="rgb(233,223,10)" fg:x="24431" fg:w="44"/><text x="80.5280%" y="223.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (44 samples, 0.14%)</title><rect x="80.2780%" y="197" width="0.1446%" height="15" fill="rgb(215,21,27)" fg:x="24431" fg:w="44"/><text x="80.5280%" y="207.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (44 samples, 0.14%)</title><rect x="80.2780%" y="181" width="0.1446%" height="15" fill="rgb(232,23,21)" fg:x="24431" fg:w="44"/><text x="80.5280%" y="191.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (44 samples, 0.14%)</title><rect x="80.2780%" y="165" width="0.1446%" height="15" fill="rgb(244,5,23)" fg:x="24431" fg:w="44"/><text x="80.5280%" y="175.50"></text></g><g><title>rs-1brc.exe`core::ptr::const_ptr::impl$0::add (44 samples, 0.14%)</title><rect x="80.2780%" y="149" width="0.1446%" height="15" fill="rgb(226,81,46)" fg:x="24431" fg:w="44"/><text x="80.5280%" y="159.50"></text></g><g><title>`0x7FFD28C610C0 (26 samples, 0.09%)</title><rect x="86.1072%" y="181" width="0.0854%" height="15" fill="rgb(247,70,30)" fg:x="26205" fg:w="26"/><text x="86.3572%" y="191.50"></text></g><g><title>`0x7FFD28C610C3 (22 samples, 0.07%)</title><rect x="86.1926%" y="181" width="0.0723%" height="15" fill="rgb(212,68,19)" fg:x="26231" fg:w="22"/><text x="86.4426%" y="191.50"></text></g><g><title>`0x7FFD28C610CA (24 samples, 0.08%)</title><rect x="86.2649%" y="181" width="0.0789%" height="15" fill="rgb(240,187,13)" fg:x="26253" fg:w="24"/><text x="86.5149%" y="191.50"></text></g><g><title>`0x7FFD28C610CE (11 samples, 0.04%)</title><rect x="86.3438%" y="181" width="0.0361%" height="15" fill="rgb(223,113,26)" fg:x="26277" fg:w="11"/><text x="86.5938%" y="191.50"></text></g><g><title>`0x7FFD28C611E4 (900 samples, 2.96%)</title><rect x="86.3799%" y="181" width="2.9573%" height="15" fill="rgb(206,192,2)" fg:x="26288" fg:w="900"/><text x="86.6299%" y="191.50">`0x..</text></g><g><title>`0x7FFD28C611E6 (70 samples, 0.23%)</title><rect x="89.3372%" y="181" width="0.2300%" height="15" fill="rgb(241,108,4)" fg:x="27188" fg:w="70"/><text x="89.5872%" y="191.50"></text></g><g><title>`0x7FFD28C611EA (1,881 samples, 6.18%)</title><rect x="89.5672%" y="181" width="6.1808%" height="15" fill="rgb(247,173,49)" fg:x="27258" fg:w="1881"/><text x="89.8172%" y="191.50">`0x7FFD2..</text></g><g><title>`0x7FFD28C611F1 (144 samples, 0.47%)</title><rect x="95.7480%" y="181" width="0.4732%" height="15" fill="rgb(224,114,35)" fg:x="29139" fg:w="144"/><text x="95.9980%" y="191.50"></text></g><g><title>`0x7FFD28C611F5 (37 samples, 0.12%)</title><rect x="96.2212%" y="181" width="0.1216%" height="15" fill="rgb(245,159,27)" fg:x="29283" fg:w="37"/><text x="96.4712%" y="191.50"></text></g><g><title>`0x7FFD28C611FC (402 samples, 1.32%)</title><rect x="96.3428%" y="181" width="1.3209%" height="15" fill="rgb(245,172,44)" fg:x="29320" fg:w="402"/><text x="96.5928%" y="191.50"></text></g><g><title>`0x7FFD28C62010 (20 samples, 0.07%)</title><rect x="97.6637%" y="181" width="0.0657%" height="15" fill="rgb(236,23,11)" fg:x="29722" fg:w="20"/><text x="97.9137%" y="191.50"></text></g><g><title>rs-1brc.exe`rs_1brc::timeit (30,408 samples, 99.92%)</title><rect x="0.0263%" y="277" width="99.9179%" height="15" fill="rgb(205,117,38)" fg:x="8" fg:w="30408"/><text x="0.2763%" y="287.50">rs-1brc.exe`rs_1brc::timeit</text></g><g><title>rs-1brc.exe`rs_1brc::main::closure$0 (30,408 samples, 99.92%)</title><rect x="0.0263%" y="261" width="99.9179%" height="15" fill="rgb(237,72,25)" fg:x="8" fg:w="30408"/><text x="0.2763%" y="271.50">rs-1brc.exe`rs_1brc::main::closure$0</text></g><g><title>rs-1brc.exe`rs_1brc::approach_4::run(ref$ (30,408 samples, 99.92%)</title><rect x="0.0263%" y="245" width="99.9179%" height="15" fill="rgb(244,70,9)" fg:x="8" fg:w="30408"/><text x="0.2763%" y="255.50">rs-1brc.exe`rs_1brc::approach_4::run(ref$</text></g><g><title>rs-1brc.exe`rs_1brc::approach_4::next (13,583 samples, 44.63%)</title><rect x="55.3117%" y="229" width="44.6325%" height="15" fill="rgb(217,125,39)" fg:x="16833" fg:w="13583"/><text x="55.5617%" y="239.50">rs-1brc.exe`rs_1brc::approach_4::next</text></g><g><title>rs-1brc.exe`rs_1brc::approach_4::fill_by_slice(ref$&lt;slice2$ (5,941 samples, 19.52%)</title><rect x="80.4226%" y="213" width="19.5216%" height="15" fill="rgb(235,36,10)" fg:x="24475" fg:w="5941"/><text x="80.6726%" y="223.50">rs-1brc.exe`rs_1brc::approach_4..</text></g><g><title>rs-1brc.exe`core::intrinsics::copy_nonoverlapping (5,726 samples, 18.82%)</title><rect x="81.1290%" y="197" width="18.8151%" height="15" fill="rgb(251,123,47)" fg:x="24690" fg:w="5726"/><text x="81.3790%" y="207.50">rs-1brc.exe`core::intrinsics:..</text></g><g><title>rs-1brc.exe`memcpy (674 samples, 2.21%)</title><rect x="97.7294%" y="181" width="2.2147%" height="15" fill="rgb(221,13,13)" fg:x="29742" fg:w="674"/><text x="97.9794%" y="191.50">r..</text></g><g><title>`0x7FFD429AAA48 (30,417 samples, 99.95%)</title><rect x="0.0000%" y="501" width="99.9474%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="30417"/><text x="0.2500%" y="511.50">`0x7FFD429AAA48</text></g><g><title>`0x7FFD4167257D (30,417 samples, 99.95%)</title><rect x="0.0000%" y="485" width="99.9474%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="30417"/><text x="0.2500%" y="495.50">`0x7FFD4167257D</text></g><g><title>rs-1brc.exe`__scrt_common_main_seh() (30,415 samples, 99.94%)</title><rect x="0.0066%" y="469" width="99.9409%" height="15" fill="rgb(245,182,24)" fg:x="2" fg:w="30415"/><text x="0.2566%" y="479.50">rs-1brc.exe`__scrt_common_main_seh()</text></g><g><title>rs-1brc.exe`invoke_main() (30,411 samples, 99.93%)</title><rect x="0.0197%" y="453" width="99.9277%" height="15" fill="rgb(242,14,37)" fg:x="6" fg:w="30411"/><text x="0.2697%" y="463.50">rs-1brc.exe`invoke_main()</text></g><g><title>rs-1brc.exe`main (30,411 samples, 99.93%)</title><rect x="0.0197%" y="437" width="99.9277%" height="15" fill="rgb(246,228,12)" fg:x="6" fg:w="30411"/><text x="0.2697%" y="447.50">rs-1brc.exe`main</text></g><g><title>rs-1brc.exe`std::rt::lang_start_internal (30,411 samples, 99.93%)</title><rect x="0.0197%" y="421" width="99.9277%" height="15" fill="rgb(213,55,15)" fg:x="6" fg:w="30411"/><text x="0.2697%" y="431.50">rs-1brc.exe`std::rt::lang_start_internal</text></g><g><title>rs-1brc.exe`std::panic::catch_unwind (30,411 samples, 99.93%)</title><rect x="0.0197%" y="405" width="99.9277%" height="15" fill="rgb(209,9,3)" fg:x="6" fg:w="30411"/><text x="0.2697%" y="415.50">rs-1brc.exe`std::panic::catch_unwind</text></g><g><title>rs-1brc.exe`std::panicking::try (30,411 samples, 99.93%)</title><rect x="0.0197%" y="389" width="99.9277%" height="15" fill="rgb(230,59,30)" fg:x="6" fg:w="30411"/><text x="0.2697%" y="399.50">rs-1brc.exe`std::panicking::try</text></g><g><title>rs-1brc.exe`std::panicking::try::do_call (30,411 samples, 99.93%)</title><rect x="0.0197%" y="373" width="99.9277%" height="15" fill="rgb(209,121,21)" fg:x="6" fg:w="30411"/><text x="0.2697%" y="383.50">rs-1brc.exe`std::panicking::try::do_call</text></g><g><title>rs-1brc.exe`std::rt::lang_start_internal::closure$2 (30,409 samples, 99.92%)</title><rect x="0.0263%" y="357" width="99.9211%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="30409"/><text x="0.2763%" y="367.50">rs-1brc.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>rs-1brc.exe`std::panic::catch_unwind (30,409 samples, 99.92%)</title><rect x="0.0263%" y="341" width="99.9211%" height="15" fill="rgb(232,18,1)" fg:x="8" fg:w="30409"/><text x="0.2763%" y="351.50">rs-1brc.exe`std::panic::catch_unwind</text></g><g><title>rs-1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (30,409 samples, 99.92%)</title><rect x="0.0263%" y="325" width="99.9211%" height="15" fill="rgb(215,41,42)" fg:x="8" fg:w="30409"/><text x="0.2763%" y="335.50">rs-1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>rs-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (30,409 samples, 99.92%)</title><rect x="0.0263%" y="309" width="99.9211%" height="15" fill="rgb(224,123,36)" fg:x="8" fg:w="30409"/><text x="0.2763%" y="319.50">rs-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>rs-1brc.exe`rs_1brc::main (30,409 samples, 99.92%)</title><rect x="0.0263%" y="293" width="99.9211%" height="15" fill="rgb(240,125,3)" fg:x="8" fg:w="30409"/><text x="0.2763%" y="303.50">rs-1brc.exe`rs_1brc::main</text></g><g><title>`0x7FFD42A2DF83 (7 samples, 0.02%)</title><rect x="99.9573%" y="453" width="0.0230%" height="15" fill="rgb(205,98,50)" fg:x="30420" fg:w="7"/><text x="100.2073%" y="463.50"></text></g><g><title>`0x7FFD4297A25A (7 samples, 0.02%)</title><rect x="99.9573%" y="437" width="0.0230%" height="15" fill="rgb(205,185,37)" fg:x="30420" fg:w="7"/><text x="100.2073%" y="447.50"></text></g><g><title>`0x7FFD42968CAC (7 samples, 0.02%)</title><rect x="99.9573%" y="421" width="0.0230%" height="15" fill="rgb(238,207,15)" fg:x="30420" fg:w="7"/><text x="100.2073%" y="431.50"></text></g><g><title>`0x7FFD429C3EA3 (15 samples, 0.05%)</title><rect x="99.9474%" y="485" width="0.0493%" height="15" fill="rgb(213,199,42)" fg:x="30417" fg:w="15"/><text x="100.1974%" y="495.50"></text></g><g><title>`0x7FFD42A1A144 (15 samples, 0.05%)</title><rect x="99.9474%" y="469" width="0.0493%" height="15" fill="rgb(235,201,11)" fg:x="30417" fg:w="15"/><text x="100.1974%" y="479.50"></text></g><g><title>all (30,433 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="30433"/><text x="0.2500%" y="527.50"></text></g><g><title>`0x7FFD429C3DCE (16 samples, 0.05%)</title><rect x="99.9474%" y="501" width="0.0526%" height="15" fill="rgb(241,35,35)" fg:x="30417" fg:w="16"/><text x="100.1974%" y="511.50"></text></g></svg></svg>