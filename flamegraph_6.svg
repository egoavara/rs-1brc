<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="78412"><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::finish (1,943 samples, 2.48%)</title><rect x="26.1975%" y="165" width="2.4779%" height="15" fill="rgb(227,0,7)" fg:x="20542" fg:w="1943"/><text x="26.4475%" y="175.50">rs..</text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (1,943 samples, 2.48%)</title><rect x="26.1975%" y="149" width="2.4779%" height="15" fill="rgb(217,0,24)" fg:x="20542" fg:w="1943"/><text x="26.4475%" y="159.50">rs..</text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (825 samples, 1.05%)</title><rect x="27.6233%" y="133" width="1.0521%" height="15" fill="rgb(221,193,54)" fg:x="21660" fg:w="825"/><text x="27.8733%" y="143.50"></text></g><g><title>rs-1brc.exe`ahash::random_state::get_fixed_seeds (1,287 samples, 1.64%)</title><rect x="30.9404%" y="133" width="1.6413%" height="15" fill="rgb(248,212,6)" fg:x="24261" fg:w="1287"/><text x="31.1904%" y="143.50"></text></g><g><title>rs-1brc.exe`once_cell::race::once_box::OnceBox&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::get_or_init (1,287 samples, 1.64%)</title><rect x="30.9404%" y="117" width="1.6413%" height="15" fill="rgb(208,68,35)" fg:x="24261" fg:w="1287"/><text x="31.1904%" y="127.50"></text></g><g><title>rs-1brc.exe`core::sync::atomic::AtomicPtr&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::load (796 samples, 1.02%)</title><rect x="33.1913%" y="117" width="1.0152%" height="15" fill="rgb(232,128,0)" fg:x="26026" fg:w="796"/><text x="33.4413%" y="127.50"></text></g><g><title>rs-1brc.exe`core::sync::atomic::atomic_load (796 samples, 1.02%)</title><rect x="33.1913%" y="101" width="1.0152%" height="15" fill="rgb(207,160,47)" fg:x="26026" fg:w="796"/><text x="33.4413%" y="111.50"></text></g><g><title>rs-1brc.exe`ahash::impl$2::default (4,339 samples, 5.53%)</title><rect x="28.6755%" y="165" width="5.5336%" height="15" fill="rgb(228,23,34)" fg:x="22485" fg:w="4339"/><text x="28.9255%" y="175.50">rs-1brc..</text></g><g><title>rs-1brc.exe`ahash::random_state::RandomState::with_fixed_keys (4,339 samples, 5.53%)</title><rect x="28.6755%" y="149" width="5.5336%" height="15" fill="rgb(218,30,26)" fg:x="22485" fg:w="4339"/><text x="28.9255%" y="159.50">rs-1brc..</text></g><g><title>rs-1brc.exe`once_cell::race::once_box::OnceBox&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::get_or_try_init&lt;array$&lt;array$&lt;u64,4&gt;,2&gt;,once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$&lt;u64,4&gt;,2&gt;,ahash::random_state::get_fixed_seeds::closure_env$0&gt;,enum2$&lt;once_cell::race::once_box::impl$3::get_or_init::Void&gt; &gt;(once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$ (1,276 samples, 1.63%)</title><rect x="32.5817%" y="133" width="1.6273%" height="15" fill="rgb(220,122,19)" fg:x="25548" fg:w="1276"/><text x="32.8317%" y="143.50"></text></g><g><title>rs-1brc.exe`ahash::convert::impl$0::read_u128(ref$&lt;slice2$ (9 samples, 0.01%)</title><rect x="35.4882%" y="101" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="27827" fg:w="9"/><text x="35.7382%" y="111.50"></text></g><g><title>rs-1brc.exe`core::slice::impl$0::split_at(ref$&lt;slice2$ (9 samples, 0.01%)</title><rect x="35.4882%" y="85" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="27827" fg:w="9"/><text x="35.7382%" y="95.50"></text></g><g><title>rs-1brc.exe`core::slice::impl$0::split_at_checked(ref$&lt;slice2$ (9 samples, 0.01%)</title><rect x="35.4882%" y="69" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="27827" fg:w="9"/><text x="35.7382%" y="79.50"></text></g><g><title>rs-1brc.exe`core::slice::impl$0::split_at_unchecked(ref$&lt;slice2$ (9 samples, 0.01%)</title><rect x="35.4882%" y="53" width="0.0115%" height="15" fill="rgb(206,188,39)" fg:x="27827" fg:w="9"/><text x="35.7382%" y="63.50"></text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (596 samples, 0.76%)</title><rect x="35.7713%" y="85" width="0.7601%" height="15" fill="rgb(217,207,13)" fg:x="28049" fg:w="596"/><text x="36.0213%" y="95.50"></text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (228 samples, 0.29%)</title><rect x="36.2406%" y="69" width="0.2908%" height="15" fill="rgb(231,73,38)" fg:x="28417" fg:w="228"/><text x="36.4906%" y="79.50"></text></g><g><title>rs-1brc.exe`ahash::fallback_hash::AHasher::large_update (2,038 samples, 2.60%)</title><rect x="35.4997%" y="101" width="2.5991%" height="15" fill="rgb(225,20,46)" fg:x="27836" fg:w="2038"/><text x="35.7497%" y="111.50">rs..</text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_add (1,229 samples, 1.57%)</title><rect x="36.5314%" y="85" width="1.5674%" height="15" fill="rgb(210,31,41)" fg:x="28645" fg:w="1229"/><text x="36.7814%" y="95.50"></text></g><g><title>rs-1brc.exe`ahash::operations::read_small(ref$&lt;slice2$ (1,941 samples, 2.48%)</title><rect x="38.0988%" y="101" width="2.4754%" height="15" fill="rgb(221,200,47)" fg:x="29874" fg:w="1941"/><text x="38.3488%" y="111.50">rs..</text></g><g><title>rs-1brc.exe`ahash::convert::impl$0::read_last_u32(ref$&lt;slice2$ (1,681 samples, 2.14%)</title><rect x="38.4303%" y="85" width="2.1438%" height="15" fill="rgb(226,26,5)" fg:x="30134" fg:w="1681"/><text x="38.6803%" y="95.50">r..</text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (5,421 samples, 6.91%)</title><rect x="34.2090%" y="117" width="6.9135%" height="15" fill="rgb(249,33,26)" fg:x="26824" fg:w="5421"/><text x="34.4590%" y="127.50">rs-1brc.e..</text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_add (430 samples, 0.55%)</title><rect x="40.5741%" y="101" width="0.5484%" height="15" fill="rgb(235,183,28)" fg:x="31815" fg:w="430"/><text x="40.8241%" y="111.50"></text></g><g><title>rs-1brc.exe`alloc::borrow::impl$12::hash(enum2$&lt;alloc::borrow::Cow (8,664 samples, 11.05%)</title><rect x="34.2090%" y="165" width="11.0493%" height="15" fill="rgb(221,5,38)" fg:x="26824" fg:w="8664"/><text x="34.4590%" y="175.50">rs-1brc.exe`allo..</text></g><g><title>rs-1brc.exe`core::hash::impls::impl$2::hash(ref$ (8,664 samples, 11.05%)</title><rect x="34.2090%" y="149" width="11.0493%" height="15" fill="rgb(247,18,42)" fg:x="26824" fg:w="8664"/><text x="34.4590%" y="159.50">rs-1brc.exe`core..</text></g><g><title>rs-1brc.exe`core::hash::Hasher::write_str(ahash::fallback_hash::AHasher*, ref$ (8,664 samples, 11.05%)</title><rect x="34.2090%" y="133" width="11.0493%" height="15" fill="rgb(241,131,45)" fg:x="26824" fg:w="8664"/><text x="34.4590%" y="143.50">rs-1brc.exe`core..</text></g><g><title>rs-1brc.exe`ahash::fallback_hash::impl$1::write_u8 (3,243 samples, 4.14%)</title><rect x="41.1225%" y="117" width="4.1358%" height="15" fill="rgb(249,31,29)" fg:x="32245" fg:w="3243"/><text x="41.3725%" y="127.50">rs-1b..</text></g><g><title>rs-1brc.exe`ahash::fallback_hash::AHasher::update (3,243 samples, 4.14%)</title><rect x="41.1225%" y="101" width="4.1358%" height="15" fill="rgb(225,111,53)" fg:x="32245" fg:w="3243"/><text x="41.3725%" y="111.50">rs-1b..</text></g><g><title>rs-1brc.exe`ahash::operations::folded_multiply (1,778 samples, 2.27%)</title><rect x="42.9909%" y="85" width="2.2675%" height="15" fill="rgb(238,160,17)" fg:x="33710" fg:w="1778"/><text x="43.2409%" y="95.50">r..</text></g><g><title>rs-1brc.exe`core::num::impl$10::wrapping_mul (725 samples, 0.92%)</title><rect x="44.3338%" y="69" width="0.9246%" height="15" fill="rgb(214,148,48)" fg:x="34763" fg:w="725"/><text x="44.5838%" y="79.50"></text></g><g><title>rs-1brc.exe`alloc::vec::Vec&lt;rs_1brc::approach_6::Data,alloc::alloc::Global&gt;::push (17 samples, 0.02%)</title><rect x="45.2584%" y="165" width="0.0217%" height="15" fill="rgb(232,36,49)" fg:x="35488" fg:w="17"/><text x="45.5084%" y="175.50"></text></g><g><title>rs-1brc.exe`core::ptr::write (13 samples, 0.02%)</title><rect x="45.2635%" y="149" width="0.0166%" height="15" fill="rgb(209,103,24)" fg:x="35492" fg:w="13"/><text x="45.5135%" y="159.50"></text></g><g><title>rs-1brc.exe`alloc::vec::impl$13::index_mut(alloc::vec::Vec (675 samples, 0.86%)</title><rect x="45.2813%" y="165" width="0.8608%" height="15" fill="rgb(229,88,8)" fg:x="35506" fg:w="675"/><text x="45.5313%" y="175.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (675 samples, 0.86%)</title><rect x="45.2813%" y="149" width="0.8608%" height="15" fill="rgb(213,181,19)" fg:x="35506" fg:w="675"/><text x="45.5313%" y="159.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (675 samples, 0.86%)</title><rect x="45.2813%" y="133" width="0.8608%" height="15" fill="rgb(254,191,54)" fg:x="35506" fg:w="675"/><text x="45.5313%" y="143.50"></text></g><g><title>rs-1brc.exe`core::f64::impl$0::max (466 samples, 0.59%)</title><rect x="46.1422%" y="165" width="0.5943%" height="15" fill="rgb(241,83,37)" fg:x="36181" fg:w="466"/><text x="46.3922%" y="175.50"></text></g><g><title>rs-1brc.exe`core::f64::impl$0::min (3,826 samples, 4.88%)</title><rect x="46.7365%" y="165" width="4.8794%" height="15" fill="rgb(233,36,39)" fg:x="36647" fg:w="3826"/><text x="46.9865%" y="175.50">rs-1br..</text></g><g><title>rs-1brc.exe`core::ptr::drop_in_place (11 samples, 0.01%)</title><rect x="51.6158%" y="165" width="0.0140%" height="15" fill="rgb(226,3,54)" fg:x="40473" fg:w="11"/><text x="51.8658%" y="175.50"></text></g><g><title>rs-1brc.exe`core::ptr::drop_in_place (11 samples, 0.01%)</title><rect x="51.6158%" y="149" width="0.0140%" height="15" fill="rgb(245,192,40)" fg:x="40473" fg:w="11"/><text x="51.8658%" y="159.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::float::impl$1::from_u64 (748 samples, 0.95%)</title><rect x="59.4692%" y="101" width="0.9539%" height="15" fill="rgb(238,167,29)" fg:x="46631" fg:w="748"/><text x="59.7192%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::float::impl$1::pow10_fast_path (28 samples, 0.04%)</title><rect x="60.4231%" y="101" width="0.0357%" height="15" fill="rgb(232,182,51)" fg:x="47379" fg:w="28"/><text x="60.6731%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::number::Number::is_fast_path (398 samples, 0.51%)</title><rect x="60.4589%" y="101" width="0.5076%" height="15" fill="rgb(231,60,39)" fg:x="47407" fg:w="398"/><text x="60.7089%" y="111.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::number::Number::try_fast_path (4,527 samples, 5.77%)</title><rect x="59.0458%" y="117" width="5.7734%" height="15" fill="rgb(208,69,12)" fg:x="46299" fg:w="4527"/><text x="59.2958%" y="127.50">rs-1brc..</text></g><g><title>rs-1brc.exe`core::ops::arith::impl$217::div (3,021 samples, 3.85%)</title><rect x="60.9664%" y="101" width="3.8527%" height="15" fill="rgb(235,93,37)" fg:x="47805" fg:w="3021"/><text x="61.2164%" y="111.50">rs-1..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (374 samples, 0.48%)</title><rect x="76.8977%" y="53" width="0.4770%" height="15" fill="rgb(213,116,39)" fg:x="60297" fg:w="374"/><text x="77.1477%" y="63.50"></text></g><g><title>rs-1brc.exe`core::num::impl$9::wrapping_mul (124 samples, 0.16%)</title><rect x="77.2165%" y="37" width="0.1581%" height="15" fill="rgb(222,207,29)" fg:x="60547" fg:w="124"/><text x="77.4665%" y="47.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::try_parse_digits (6,014 samples, 7.67%)</title><rect x="70.6984%" y="85" width="7.6697%" height="15" fill="rgb(206,96,30)" fg:x="55436" fg:w="6014"/><text x="70.9484%" y="95.50">rs-1brc.ex..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::common::impl$0::parse_digits (5,572 samples, 7.11%)</title><rect x="71.2621%" y="69" width="7.1061%" height="15" fill="rgb(218,138,4)" fg:x="55878" fg:w="5572"/><text x="71.5121%" y="79.50">rs-1brc.ex..</text></g><g><title>rs-1brc.exe`core::num::impl$6::wrapping_sub (779 samples, 0.99%)</title><rect x="77.3746%" y="53" width="0.9935%" height="15" fill="rgb(250,191,14)" fg:x="60671" fg:w="779"/><text x="77.6246%" y="63.50"></text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::parse_number (10,740 samples, 13.70%)</title><rect x="64.8192%" y="117" width="13.6969%" height="15" fill="rgb(239,60,40)" fg:x="50826" fg:w="10740"/><text x="65.0692%" y="127.50">rs-1brc.exe`core::num..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::parse::parse_partial_number (7,068 samples, 9.01%)</title><rect x="69.5021%" y="101" width="9.0139%" height="15" fill="rgb(206,27,48)" fg:x="54498" fg:w="7068"/><text x="69.7521%" y="111.50">rs-1brc.exe`c..</text></g><g><title>rs-1brc.exe`core::slice::impl$0::split_first (116 samples, 0.15%)</title><rect x="78.3681%" y="85" width="0.1479%" height="15" fill="rgb(225,35,8)" fg:x="61450" fg:w="116"/><text x="78.6181%" y="95.50"></text></g><g><title>rs-1brc.exe`core::str::impl$0::parse(ref$ (21,214 samples, 27.05%)</title><rect x="51.6299%" y="165" width="27.0545%" height="15" fill="rgb(250,213,24)" fg:x="40484" fg:w="21214"/><text x="51.8799%" y="175.50">rs-1brc.exe`core::str::impl$0::parse(ref$</text></g><g><title>rs-1brc.exe`core::num::dec2flt::impl$3::from_str (20,678 samples, 26.37%)</title><rect x="52.3134%" y="149" width="26.3710%" height="15" fill="rgb(247,123,22)" fg:x="41020" fg:w="20678"/><text x="52.5634%" y="159.50">rs-1brc.exe`core::num::dec2flt::impl$3::fr..</text></g><g><title>rs-1brc.exe`core::num::dec2flt::dec2flt (17,320 samples, 22.09%)</title><rect x="56.5959%" y="133" width="22.0885%" height="15" fill="rgb(231,138,38)" fg:x="44378" fg:w="17320"/><text x="56.8459%" y="143.50">rs-1brc.exe`core::num::dec2flt::dec..</text></g><g><title>rs-1brc.exe`core::slice::impl$0::first (132 samples, 0.17%)</title><rect x="78.5160%" y="117" width="0.1683%" height="15" fill="rgb(231,145,46)" fg:x="61566" fg:w="132"/><text x="78.7660%" y="127.50"></text></g><g><title>rs-1brc.exe`enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;::unwrap(enum2$&lt;core::result::Result (580 samples, 0.74%)</title><rect x="78.6844%" y="165" width="0.7397%" height="15" fill="rgb(251,118,11)" fg:x="61698" fg:w="580"/><text x="78.9344%" y="175.50"></text></g><g><title>rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::first_set(core::core_simd::masks::Mask (3,686 samples, 4.70%)</title><rect x="82.6672%" y="149" width="4.7008%" height="15" fill="rgb(217,147,25)" fg:x="64821" fg:w="3686"/><text x="82.9172%" y="159.50">rs-1b..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::Mask&lt;i8,32&gt;::to_bitmask(core::core_simd::masks::Mask (3,170 samples, 4.04%)</title><rect x="83.3253%" y="133" width="4.0427%" height="15" fill="rgb(247,81,37)" fg:x="65337" fg:w="3170"/><text x="83.5753%" y="143.50">rs-1..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_bitmask_integer(core::core_simd::masks::mask_impl::Mask (3,170 samples, 4.04%)</title><rect x="83.3253%" y="117" width="4.0427%" height="15" fill="rgb(209,12,38)" fg:x="65337" fg:w="3170"/><text x="83.5753%" y="127.50">rs-1..</text></g><g><title>rs-1brc.exe`core::core_simd::masks::mask_impl::Mask&lt;i8,32&gt;::to_bitmask_impl(core::core_simd::masks::mask_impl::Mask (3,170 samples, 4.04%)</title><rect x="83.3253%" y="101" width="4.0427%" height="15" fill="rgb(227,1,9)" fg:x="65337" fg:w="3170"/><text x="83.5753%" y="111.50">rs-1..</text></g><g><title>rs-1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (1,058 samples, 1.35%)</title><rect x="87.3680%" y="149" width="1.3493%" height="15" fill="rgb(248,47,43)" fg:x="68507" fg:w="1058"/><text x="87.6180%" y="159.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (1,058 samples, 1.35%)</title><rect x="87.3680%" y="133" width="1.3493%" height="15" fill="rgb(221,10,30)" fg:x="68507" fg:w="1058"/><text x="87.6180%" y="143.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (236 samples, 0.30%)</title><rect x="88.7173%" y="149" width="0.3010%" height="15" fill="rgb(210,229,1)" fg:x="69565" fg:w="236"/><text x="88.9673%" y="159.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (236 samples, 0.30%)</title><rect x="88.7173%" y="133" width="0.3010%" height="15" fill="rgb(222,148,37)" fg:x="69565" fg:w="236"/><text x="88.9673%" y="143.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (236 samples, 0.30%)</title><rect x="88.7173%" y="117" width="0.3010%" height="15" fill="rgb(234,67,33)" fg:x="69565" fg:w="236"/><text x="88.9673%" y="127.50"></text></g><g><title>rs-1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (236 samples, 0.30%)</title><rect x="88.7173%" y="101" width="0.3010%" height="15" fill="rgb(247,98,35)" fg:x="69565" fg:w="236"/><text x="88.9673%" y="111.50"></text></g><g><title>rs-1brc.exe`core::ptr::const_ptr::impl$0::add (236 samples, 0.30%)</title><rect x="88.7173%" y="85" width="0.3010%" height="15" fill="rgb(247,138,52)" fg:x="69565" fg:w="236"/><text x="88.9673%" y="95.50"></text></g><g><title>rs-1brc.exe`rs_1brc::timeit (78,386 samples, 99.97%)</title><rect x="0.0128%" y="213" width="99.9668%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="78386"/><text x="0.2628%" y="223.50">rs-1brc.exe`rs_1brc::timeit</text></g><g><title>rs-1brc.exe`rs_1brc::main::closure$0 (78,386 samples, 99.97%)</title><rect x="0.0128%" y="197" width="99.9668%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="78386"/><text x="0.2628%" y="207.50">rs-1brc.exe`rs_1brc::main::closure$0</text></g><g><title>rs-1brc.exe`rs_1brc::approach_6::run(ref$ (78,386 samples, 99.97%)</title><rect x="0.0128%" y="181" width="99.9668%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="78386"/><text x="0.2628%" y="191.50">rs-1brc.exe`rs_1brc::approach_6::run(ref$</text></g><g><title>rs-1brc.exe`rs_1brc::approach_6::next (16,117 samples, 20.55%)</title><rect x="79.4253%" y="165" width="20.5543%" height="15" fill="rgb(216,154,8)" fg:x="62279" fg:w="16117"/><text x="79.6753%" y="175.50">rs-1brc.exe`rs_1brc::approach_6:..</text></g><g><title>rs-1brc.exe`rs_1brc::approach_6::fill_by_slice(ref$&lt;slice2$ (8,595 samples, 10.96%)</title><rect x="89.0183%" y="149" width="10.9613%" height="15" fill="rgb(244,35,45)" fg:x="69801" fg:w="8595"/><text x="89.2683%" y="159.50">rs-1brc.exe`rs_1..</text></g><g><title>rs-1brc.exe`core::core_simd::vector::Simd&lt;u8,32&gt;::from_slice(ref$&lt;slice2$ (8,452 samples, 10.78%)</title><rect x="89.2006%" y="133" width="10.7790%" height="15" fill="rgb(251,115,12)" fg:x="69944" fg:w="8452"/><text x="89.4506%" y="143.50">rs-1brc.exe`core..</text></g><g><title>`0x7FFFBAA4AA48 (78,396 samples, 99.98%)</title><rect x="0.0013%" y="437" width="99.9796%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="78396"/><text x="0.2513%" y="447.50">`0x7FFFBAA4AA48</text></g><g><title>`0x7FFFB9AF257D (78,396 samples, 99.98%)</title><rect x="0.0013%" y="421" width="99.9796%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="78396"/><text x="0.2513%" y="431.50">`0x7FFFB9AF257D</text></g><g><title>rs-1brc.exe`__scrt_common_main_seh() (78,391 samples, 99.97%)</title><rect x="0.0077%" y="405" width="99.9732%" height="15" fill="rgb(207,117,47)" fg:x="6" fg:w="78391"/><text x="0.2577%" y="415.50">rs-1brc.exe`__scrt_common_main_seh()</text></g><g><title>rs-1brc.exe`invoke_main() (78,388 samples, 99.97%)</title><rect x="0.0115%" y="389" width="99.9694%" height="15" fill="rgb(249,43,39)" fg:x="9" fg:w="78388"/><text x="0.2615%" y="399.50">rs-1brc.exe`invoke_main()</text></g><g><title>rs-1brc.exe`main (78,388 samples, 99.97%)</title><rect x="0.0115%" y="373" width="99.9694%" height="15" fill="rgb(209,38,44)" fg:x="9" fg:w="78388"/><text x="0.2615%" y="383.50">rs-1brc.exe`main</text></g><g><title>rs-1brc.exe`std::rt::lang_start_internal (78,388 samples, 99.97%)</title><rect x="0.0115%" y="357" width="99.9694%" height="15" fill="rgb(236,212,23)" fg:x="9" fg:w="78388"/><text x="0.2615%" y="367.50">rs-1brc.exe`std::rt::lang_start_internal</text></g><g><title>rs-1brc.exe`std::panic::catch_unwind (78,388 samples, 99.97%)</title><rect x="0.0115%" y="341" width="99.9694%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="78388"/><text x="0.2615%" y="351.50">rs-1brc.exe`std::panic::catch_unwind</text></g><g><title>rs-1brc.exe`std::panicking::try (78,388 samples, 99.97%)</title><rect x="0.0115%" y="325" width="99.9694%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="78388"/><text x="0.2615%" y="335.50">rs-1brc.exe`std::panicking::try</text></g><g><title>rs-1brc.exe`std::panicking::try::do_call (78,388 samples, 99.97%)</title><rect x="0.0115%" y="309" width="99.9694%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="78388"/><text x="0.2615%" y="319.50">rs-1brc.exe`std::panicking::try::do_call</text></g><g><title>rs-1brc.exe`std::rt::lang_start_internal::closure$2 (78,387 samples, 99.97%)</title><rect x="0.0128%" y="293" width="99.9681%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="78387"/><text x="0.2628%" y="303.50">rs-1brc.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>rs-1brc.exe`std::panic::catch_unwind (78,387 samples, 99.97%)</title><rect x="0.0128%" y="277" width="99.9681%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="78387"/><text x="0.2628%" y="287.50">rs-1brc.exe`std::panic::catch_unwind</text></g><g><title>rs-1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (78,387 samples, 99.97%)</title><rect x="0.0128%" y="261" width="99.9681%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="78387"/><text x="0.2628%" y="271.50">rs-1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>rs-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (78,387 samples, 99.97%)</title><rect x="0.0128%" y="245" width="99.9681%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="78387"/><text x="0.2628%" y="255.50">rs-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>rs-1brc.exe`rs_1brc::main (78,387 samples, 99.97%)</title><rect x="0.0128%" y="229" width="99.9681%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="78387"/><text x="0.2628%" y="239.50">rs-1brc.exe`rs_1brc::main</text></g><g><title>all (78,412 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="78412"/><text x="0.2500%" y="463.50"></text></g><g><title>`0x7FFFBAA63DCE (15 samples, 0.02%)</title><rect x="99.9809%" y="437" width="0.0191%" height="15" fill="rgb(210,16,53)" fg:x="78397" fg:w="15"/><text x="100.2309%" y="447.50"></text></g><g><title>`0x7FFFBAA63EA3 (15 samples, 0.02%)</title><rect x="99.9809%" y="421" width="0.0191%" height="15" fill="rgb(235,124,12)" fg:x="78397" fg:w="15"/><text x="100.2309%" y="431.50"></text></g><g><title>`0x7FFFBAABA144 (15 samples, 0.02%)</title><rect x="99.9809%" y="405" width="0.0191%" height="15" fill="rgb(224,169,11)" fg:x="78397" fg:w="15"/><text x="100.2309%" y="415.50"></text></g></svg></svg>